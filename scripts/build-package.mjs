#!/usr/bin/env node

/**
 * Obsidian Usage Stats Plugin - Build Package Script
 *
 * 这个脚本会将所有必要的插件文件打包到 /dist 目录中，
 * 包括编译后的 JavaScript、CSS 样式文件、清单文件等
 */

import esbuild from 'esbuild'
import postcss from 'postcss'
import postcssNesting from 'postcss-nesting'
import builtins from 'builtin-modules'
import fs from 'fs-extra'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const projectRoot = path.join(__dirname, '..')

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`

// 命令行参数处理
const args = process.argv.slice(2)
const isProduction = args.includes('--production') || args.includes('-p')
const keepConsole = args.includes('--keep-console')
const outputDir =
	args.find((arg) => arg.startsWith('--output='))?.split('=')[1] || 'dist'

console.log('🚀 开始构建 Obsidian 使用统计插件...')
console.log(`📁 输出目录: ${outputDir}`)
console.log(`🏗️  构建模式: ${isProduction ? '生产' : '开发'}`)

// 创建输出目录
const distPath = path.join(projectRoot, outputDir)
await fs.ensureDir(distPath)

// 清理输出目录
console.log('🧹 清理输出目录...')
await fs.emptyDir(distPath)

// CSS 处理插件
const cssReBuild = () => ({
	name: 'css-rebuild',
	setup(build) {
		build.onLoad({ filter: /\.css$/ }, async (args) => {
			try {
				const css = await fs.promises.readFile(args.path, 'utf8')
				const result = await postcss([postcssNesting]).process(css, {
					from: args.path,
				})

				return {
					contents: result.css,
					loader: 'css',
				}
			} catch (error) {
				console.error('❌ CSS 处理错误:', error)
				return {
					contents: '',
					loader: 'css',
				}
			}
		})
	},
})

// 文件复制插件
const copyFilesPlugin = () => ({
	name: 'copy-files',
	setup(build) {
		build.onEnd(async (result) => {
			if (result.errors.length > 0) {
				console.error('❌ 构建失败，跳过文件复制')
				return
			}

			console.log('📋 复制必要文件...')

			try {
				// 复制 manifest.json
				const manifestSrc = path.join(projectRoot, 'manifest.json')
				const manifestDest = path.join(distPath, 'manifest.json')
				await fs.copy(manifestSrc, manifestDest)
				console.log('✅ 复制 manifest.json')

				// 复制 styles.css（如果存在）
				const stylesSrc = path.join(projectRoot, 'styles.css')
				const stylesDest = path.join(distPath, 'styles.css')
				if (await fs.pathExists(stylesSrc)) {
					await fs.copy(stylesSrc, stylesDest)
					console.log('✅ 复制 styles.css')
				}

				// 复制独立的 CSS 文件到 dist
				const cssFiles = ['style/usage-stats.css', 'style/view-styles.css']

				for (const cssFile of cssFiles) {
					const srcPath = path.join(projectRoot, cssFile)
					if (await fs.pathExists(srcPath)) {
						const fileName = path.basename(cssFile)
						const destPath = path.join(distPath, fileName)
						await fs.copy(srcPath, destPath)
						console.log(`✅ 复制 ${cssFile}`)
					}
				}

				// 复制版本信息文件（如果存在）
				const versionFiles = ['versions.json', 'CHANGELOG.md', 'README.md']
				for (const file of versionFiles) {
					const srcPath = path.join(projectRoot, file)
					if (await fs.pathExists(srcPath)) {
						const destPath = path.join(distPath, file)
						await fs.copy(srcPath, destPath)
						console.log(`✅ 复制 ${file}`)
					}
				}

				// 生成打包信息文件
				const buildInfo = {
					buildTime: new Date().toISOString(),
					version: JSON.parse(
						await fs.readFile(path.join(projectRoot, 'manifest.json'), 'utf8')
					).version,
					mode: isProduction ? 'production' : 'development',
					outputDir: outputDir,
				}

				await fs.writeJSON(path.join(distPath, 'build-info.json'), buildInfo, {
					spaces: 2,
				})
				console.log('✅ 生成构建信息文件')
			} catch (error) {
				console.error('❌ 文件复制失败:', error)
			}
		})
	},
})

// CSS 重命名插件
const cssRenamePlugin = () => ({
	name: 'css-rename-plugin',
	setup(build) {
		build.onEnd(async (result) => {
			const outfile = build.initialOptions.outfile
			const outdir = path.dirname(outfile)
			const cssFile = path.join(outdir, 'main.css')
			const stylesFile = path.join(outdir, 'styles.css')

			if (await fs.pathExists(cssFile)) {
				try {
					if (await fs.pathExists(stylesFile)) {
						await fs.remove(stylesFile)
					}
					await fs.move(cssFile, stylesFile)
					console.log('✅ CSS 文件重命名为 styles.css')
				} catch (e) {
					console.error('❌ CSS 文件重命名失败:', e)
				}
			}
		})
	},
})

// esbuild 配置
const buildConfig = {
	banner: {
		js: banner,
	},
	entryPoints: [path.join(projectRoot, 'src/main.ts')],
	bundle: true,
	plugins: [cssReBuild(), cssRenamePlugin(), copyFilesPlugin()],
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins,
	],
	format: 'cjs',
	target: 'es2020',
	logLevel: 'info',
	sourcemap: isProduction ? false : 'inline',
	treeShaking: true,
	outfile: path.join(distPath, 'main.js'),
	minify: isProduction,
	drop: isProduction && !keepConsole ? ['console', 'debugger'] : [],
	loader: {
		'.ttf': 'base64',
		'.woff': 'base64',
		'.woff2': 'base64',
		'.eot': 'base64',
		'.svg': 'text',
		'.png': 'base64',
		'.jpg': 'base64',
		'.jpeg': 'base64',
		'.gif': 'base64',
	},
	define: {
		'process.env.NODE_ENV': JSON.stringify(
			isProduction ? 'production' : 'development'
		),
	},
}

// 执行构建
try {
	console.log('⚡ 开始编译 TypeScript 和打包资源...')

	const result = await esbuild.build(buildConfig)

	if (result.errors.length > 0) {
		console.error('❌ 构建过程中发现错误:')
		result.errors.forEach((error) => console.error(error))
		process.exit(1)
	}

	if (result.warnings.length > 0) {
		console.warn('⚠️  构建过程中发现警告:')
		result.warnings.forEach((warning) => console.warn(warning))
	}

	// 显示打包后的文件信息
	console.log('\n📦 打包完成！生成的文件:')
	console.log('='.repeat(50))

	const files = await fs.readdir(distPath)
	for (const file of files) {
		const filePath = path.join(distPath, file)
		const stats = await fs.stat(filePath)
		const size = (stats.size / 1024).toFixed(1)
		console.log(`📄 ${file.padEnd(20)} ${size.padStart(8)} KB`)
	}

	console.log('='.repeat(50))
	console.log(`✨ 构建成功！输出目录: ${distPath}`)
	console.log(`🎯 插件已准备就绪，可以复制到 Obsidian 插件目录中使用`)
} catch (error) {
	console.error('❌ 构建失败:', error)
	process.exit(1)
}
